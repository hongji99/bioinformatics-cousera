Note that we can compute Skewi+1(Genome) from Skewi(Genome) according to the nucleotide in position i of Genome. 
If this nucleotide is G, then Skewi+1(Genome) = Skewi(Genome) + 1; 
if this nucleotide is C, then Skewi+1(Genome)= Skewi(Genome) â€“ 1; 
otherwise, Skewi+1(Genome) = Skewi(Genome).

def skew(genome):
    skew_i = 0
    skew_list = [skew_i]
    for nuc in genome:
        if nuc == "G":
            skew_i += 1
        elif nuc == "C":
            skew_i -= 1
        skew_list.append(skew_i)
    return skew_list

genome = "GAGCCACCGCGATA"
skew_values = skew(genome)
skew_string = ' '.join(map(str, skew_values))
print(skew_string)


#Question 3
Identify the value of i for which Skewi (CATTCCAGTACTTCGATGATGGCGTGAAGA) attains a minimum value.

sequence = 'TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT'

def skew(sequence):
	c = 0
	g = 0
	min_skew = 0
	skew_list = []
	index = 0
	for i in sequence:
		index += 1
		if i == 'C':
			c += 1
		if i == 'G':
			g += 1
		skew = g-c
		if skew < min_skew:
			skew_list = [index]
			min_skew = skew
		if skew == min_skew and index not in skew_list:
			skew_list.append(index)	
	print(skew_list)
	
#with open('data.txt', 'r') as in_file:
	#sequence = in_file.readline()	
	#skew(sequence)
skew(sequence)

#the skew should achieve a minimum at the position where the reverse half-strand ends and the forward half-strand begins, which is exactly the location of ori


def skew(genome):

             skew_i = 0

             skew_list = [skew_i]

             for nuc in genome:

                          if nuc == "G":

                                       skew_i += 1

                          elif nuc == "C":

                                       skew_i -= 1

                          else:

                                       pass

                          skew_list.append(skew_i)

             return skew_list

 

skew_values = skew(genome)

 

def minimum_skew(skew_values):

             min_position = []

             for n in range(len(skew_values)):

             if skew_values[n] == min(skew_values):

                          min_position.append(n)

             return min_position

 

print('The value of the minimum skew is ', min(skew_values),

' and the position with the minimum skew is or are: ', minimum_skew(skew_values))
