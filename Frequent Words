#Solve the Frequent Words Problem.

#Example:
BetterFrequentWords(Text, k)
    FrequentPatterns ← an array of strings of length 0
    freqMap ← FrequencyTable(Text, k)
    max ← MaxMap(freqMap)
    for all strings Pattern in freqMap
        if freqMap[pattern] = max
            append Pattern to frequentPatterns
    return frequentPatterns

#R
Text <- ""
k <- 12

FrequencyTable <- function(Text, k) {
  freqMap <- list()
  for (i in 1:(nchar(Text) - k + 1)) {
    pattern <- substr(Text, i, i + k - 1)
    if (pattern %in% names(freqMap)) {
      freqMap[[pattern]] <- freqMap[[pattern]] + 1
    } else {
      freqMap[[pattern]] <- 1
    }
  }
  return(freqMap)
}

MaxMap <- function(freqMap) {
  max <- 0
  for (pattern in names(freqMap)) {
    if (freqMap[[pattern]] > max) {
      max <- freqMap[[pattern]]
    }
  }
  return(max)
}

BetterFrequentWords <- function(Text, k) {
  frequentPatterns <- c()
  freqMap <- FrequencyTable(Text, k)
  max <- MaxMap(freqMap)
  for (pattern in names(freqMap)) {
    if (freqMap[[pattern]] == max) {
      frequentPatterns <- c(frequentPatterns, pattern)
    }
  }
  return(frequentPatterns)
}

result <- BetterFrequentWords(Text, k)
cat("Frequent Patterns:", paste(result, collapse = ", "), "\n")

#Python
def PatternCount(Text, Pattern):
    count = 0
    for i in range(len(Text) - len(Pattern) + 1):
        if Text[i:i + len(Pattern)] == Pattern:
            count += 1
    return count

def FrequentWords(Text, k):
    FrequentPatterns = set()
    Count = [0] * (len(Text) - k + 1)

    for i in range(len(Text) - k + 1):
        Pattern = Text[i:i + k]
        Count[i] = PatternCount(Text, Pattern)

    maxCount = max(Count)
   
    for i in range(len(Text) - k + 1):
        if Count[i] == maxCount:
            FrequentPatterns.add(Text[i:i + k])

    return list(FrequentPatterns)

text = ""
k =
result = FrequentWords(text, k)
print(result)
