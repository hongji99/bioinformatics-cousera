def Profile(motifs):
    profile = {'A': [], 'C': [], 'G': [], 'T': []}
    k = len(motifs[0])
    t = len(motifs)

    for i in range(k):
        count = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
        for j in range(t):
            count[motifs[j][i]] += 1

        for base in ['A', 'C', 'G', 'T']:
            profile[base].append(count[base] / t)

    return profile


def ProfileMostPr_kmer(text, k, profile):
    max_prob = -1
    most_probable = text[:k]

    for i in range(len(text) - k + 1):
        kmer = text[i:i+k]
        prob = 1
        for j in range(k):
            prob *= profile[kmer[j]][j]
        if prob > max_prob:
            max_prob = prob
            most_probable = kmer

    return most_probable


def Score(motifs):
    k = len(motifs[0])
    t = len(motifs)
    score = 0

    for i in range(k):
        count = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
        for j in range(t):
            count[motifs[j][i]] += 1

        max_count = max(count.values())
        score += t - max_count

    return score


def GreedyMotifSearch(Dna, k, t):
    n = len(Dna[0])
    BestMotifs = [seq[:k] for seq in Dna]  # Initialize BestMotifs with the first k-mers from each sequence

    for i in range(n - k + 1):
        motifs = [Dna[0][i:i+k]]  # Initialize motifs with the i-th k-mer from the first sequence

        for j in range(1, t):
            profile = Profile(motifs[:j])  # Build the profile based on the current motifs

            # Find the most probable k-mer in the j-th sequence using the profile
            motif = ProfileMostPr_kmer(Dna[j], k, profile)
            motifs.append(motif)

        if Score(motifs) < Score(BestMotifs):
            BestMotifs = motifs

    return BestMotifs


if __name__ == "__main__":
    # Read the DNA sequences from a file
    with open(r'./dataset_30305_5.txt', 'r') as file:
        data = file.read().strip().split()

    k = int(data[0])
    t = int(data[1])
    dna = data[2:]
    BestMotifs = GreedyMotifSearch(dna, k, t)

    # Print the motifs without newlines and separated by spaces
    for i, motif in enumerate(BestMotifs):
        print(motif, end=" ")  # Use the "end" parameter to specify the separator

    # Print a newline at the end
    print()
