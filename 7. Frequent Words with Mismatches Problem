def FrequentWordsWithMismatches(Text, k, d):
    Patterns = []
    freqMap = {}
    n = len(Text)
    for i in range(n - k + 1):
        Pattern = Text[i:i+k]
        neighborhood = Neighbors(Pattern, d)
        for neighbor in neighborhood:
            if neighbor not in freqMap:
                freqMap[neighbor] = 1
            else:
                freqMap[neighbor] += 1
    maxFreq = max(freqMap.values())
    for Pattern in freqMap:
        if freqMap[Pattern] == maxFreq:
            Patterns.append(Pattern)
    return Patterns


def Neighbors(pattern, d):
    if d == 0:
        return [pattern]
    if len(pattern) == 1:
        return ['A', 'C', 'G', 'T']
    neighborhood = []
    suffix_neighbors = Neighbors(pattern[1:], d)
    for text in suffix_neighbors:
        if HammingDistance(pattern[1:], text) < d:
            for nucleotide in ['A', 'C', 'G', 'T']:
                neighborhood.append(nucleotide + text)
        else:
            neighborhood.append(pattern[0] + text)
    return neighborhood


def HammingDistance(pattern1, pattern2):
    mismatch_count = 0
    for c1, c2 in zip(pattern1, pattern2):
        if c1 != c2:
            mismatch_count += 1
    return mismatch_count


Text = ""
d = 3

result = FrequentWordsWithMismatches(Text, k, d)
print(result)
